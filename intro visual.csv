Кадр;Время;Текст;Визуал1;13 сек;Мы предполагаем, что раз вы решили пройти курс про блокчейн, то вы о нем что-то уже слышали. Мы начнем с краткой исторической вводной и обсудим, какие идеи предшествовали появлению блокчейна. ;Говорящая голова2;15;У самого термина “блокчейн” есть много определений разной степени корректности, но на самом деле это скорее общее понятие для обозначения систем, схожих с Bitcoin – первой успешной децентрализованной системой электронной валюты. ;* Фон (здесь и далее: происходит за спиной у читающего, как в новостях):;;;слово blockchain, после слов “на самом деле” после него возникает знак вопроса3;14;Автор Bitcoin, известный под псевдонимом Сатоши Накамото, опубликовал описание протокола в октябре 2008 года, а сама сеть была запущена в январе 2009.;Фон - после слова “опубликовал” скрин bitcoin whitepaper;; ;4;14; С тех пор к возможностям Bitcoin возник невероятный интерес, а техническим решениям, лежащим в основе его реализации, стали искать применение практически во всех областях человеческой деятельности и даже посвящать онлайн-курсы.;Не знаем, что тут;;;;; ;5;7;Такой ажиотаж создал у многих ощущение, что Bitcoin возник внезапно и как бы на ровном месте.;*Фон: анимация возникновения логотипа биткоин;; ;6;15; Но в действительности Bitcoin объединил в себе сразу несколько уже существовавших идей, и его возникновению предшествовали без малого 30 лет научных работ в разных, на первый взгляд непересекающихся направлениях.;Схема: 6 линий сходящихся к слову “bitcoin” от пока закрытых пунктов;;;;; ;7;7;Первым таким направлением была идея верифицировать документы, проставляя на них время создания и увязывая в цепочки.;Открывается первый пункт - “timestamped verifiable logs”;; ;8;9;Эта идея была впервые озвучена в серии статей исследователей Стюарта Хэйбера и Скотта Сторнетты в 1991 году.     ;фото, подпись (кто они и откуда);; ;9;3;Они хотели создать что-то наподобие “цифрового нотариуса”:;Можно что-то антропоморфное;; ;10;9;для патентов, договоров и других документов может быть полезным установить, что они были созданы не позднее некоторого момента во времени. ;Какая-нибудь визуализация с таймлайном;; ;11;9;Хэйбер и Сторнетта предложили решать эту задачу с помощью электронной подписи.;*Подпись превращается в хеш ;;;;; ;12;4;Цифровая подпись – механизм подтверждения авторства сообщения при помощи;;; ;13;17;пары ключей, приватного и публичного. Приватный ключ позволяет зашифровать сообщение так, что результат, называющийся подпись, можно расшифровать публичным ключом и получить исходные данные. Таким образом можно убедиться, что посылающий подпись действительно владеет приватным ключом.;Объясняющая анимация: пара ключей, отправитель и получатель, стрелочки во все стороны, все подписаны, и все двигается и переливается ;; ;14;14;Идея Хэйбера и Сторнетты заключалась в том, что создатель подписывает сам документ, время его подписания и предыдущий документ. В результате возникает цепочка документов, каждый из которых содержит в себе отсылку к предыдущему. ;Объясняющая анимация: цепочка документов, чувак рядом с одним из них, выделяется подписываемое ;; ;15;14;Поскольку электронная подпись устроена так, что ее валидность зависит от содержания документа, если кто-то попытается изменить один из документов или пометку о времени его создания, это нарушит всю цепочку.;ряд из нескольких типизированных документов (например, висящих на стене) с последовательными датами, чувак стирает на одном из них текст (слово) и дату, пишет другие и после этого вся цепочка документов обваливается на пол ;; ;16;25;По такой схеме сегодня работает известная система Git, которую используют при разработке программного обеспечения для хранения исходных кодов и контроля версий: в ней все коммиты связаны в цепочку, и на каждом проставлено время создания, так что невозможно изменить содержимое отдельно взятого коммита или его временную метку, не переписав при этом всю цепочку.;Фон: командная строка, git commit, ;;;17;10;На протяжение 90-ых Хэйбер и Сторнетта выпустили еще несколько статей, в которых предложили ряд способов развить и усовершенствовать эту идею.; говорящая голова;;;или появляющиеся в воздухе листочки, на которых вопросы меняются на восклицательные знаки 18;4;Первым их предложением было заменить цифровую подпись на хеширование.;Фон: цифровая подпись меняется на хеш  (крестиком или еще как-нибудь)19;20;Хеш-функции, изобретенные еще в 50-ых, – это функции, которые принимают на вход сообщение любой длины, а на выходе выдают битовую строку фиксированной длины, которая называется хеш. Мы будем говорить о криптографических хеш-функциях, то есть таких хеш-функциях, которые обладают рядом свойств.;в коробочку, на которой написано SHA256, бесконечно входит строчка (???), а выходит линия из нулей и единиц, которая складывается в блок (такой, как на картинке 1, см. картинку после таблицы)20;7;●       Первое – для одного и того же сообщения они всегда выдают один и тот же хеш.;3 линии;;;hello → коробочка → блок из нулей и единиц21;5;●       Второе – необратимость, то есть невозможность вычислить исходное сообщение, имея только хеш.;две линии (верхняя и нижняя пропадают), остается одна центральная, hello пропадает, и вместо нее возникает вопрос22;8;●       Третье – устойчивость к коллизиям первого рода, то есть невозможность найти сообщение с тем же хешом, что и исходное, ;слово “hello”, рядом его хеш, под ним тот же хеш еще раз, а под hello прокручивается много вариантов слов и фраз (можно подумать про шуточные)22б;7;●       а также коллизиям второго рода, то есть невозможность найти два сообщения с одним и тем же хешом.;облако слов, фраз, абзацев, чисел и рандомных наборов символов, из них обводятся пары, и показываются их хеши - всегда разные;;;23;15;"Главное свойство хешей – то, что они представляют собой digest, то есть, репрезентацию данных в зашифрованном и сжатом виде; это значит, что стоит хоть немного поменять данные, и их хеш изменится полностью. ";hello → коробочка → блок хеша;;;дальше в hello меняется одна буква на hallo и блок хеша меняется на совершенно другую последовательность нулей и единиц24;9;По сравнению с цифровой подписью хеширование вычисляется быстрее и проще, но для случая с цифровым нотариусом ничуть не хуже подтверждает сохранность данных. ;*с прошлой картинки остается только хеш, рядом появляется цифровая подпись + значки разной скорости времени у хеша и у подписи, потом рядом с хешом появляется галочка (типа winner);;;25;15;Второе усовершенствование: вместо того, чтобы связывать документы по одному, те из них, что созданы одновременно (или почти одновременно), можно объединять в группы, или блоки, а уже блоки связывать между собой. ;сначала цепочка из иконок документов, потом несколько документов объединяются в группы, и группы - в цепочки26;15;Если к набору документов присоединить хеш предыдущего блока, а затем взять хеш от получившихся данных, то невозможно будет незаметно изменить ни один документ в цепочке блоков, поскольку это изменит хеш его блока, а значит, и хеш следующего блока и далее по цепочке.;блок с документами в каждом видны первые слова, наверху блока хеш, все обведено, от этого стрелочка к хешу, хеш в заголовке следующего блока, и такая цепочка. В ней чувак меняет какое-то слово, меняется хеш следующего блока, и следующего, и т. д.;;;27;16;И, наконец, третье их предложение: внутри блока можно заменить линейную цепочку документов на дерево Меркла  – еще один концепт, который мы будем подробно обсуждать в курсе и который спустя 10 лет нашел применение в системе Bitcoin.;группа документов в предыдущей картинке заменяется на картинку лиственного дерева. Диктор оборачивается, тыкает картинку, она превращается в елку, тыкает еще раз и она превращается в пиктограмму дерева меркла;;;28;14;Деревья Меркла (хэш-дерево, дерево хэшей, Merkle tree(s)) названы по имени одного из крупнейших криптологов конца 20 века, Ральфа Меркла, который и предложил идею в 1980 году.;рядом с пиктограммой появляется  фото самого Меркла29;33;Дерево Меркла – это способ хранить данные не просто в сжатом виде, как это позволяет делать хеширование, но в таком, чтобы было максимально просто проверить, содержится ли среди этих данных та или иная информация. Изначально Меркл предлагал эту структуру для проверки электронных сертификатов, хранящихся в некой глобальной директории, с тем, чтобы, например, сайт предоставлял посетителю сертификат и короткое доказательство его истинности. Сейчас такая структура широко применяется в целом наборе протоколов.;говорящая голова;;;30;5;Посмотрим, как устроен самый простой тип дерева Меркла – бинарный: ;на слове бинарный появляется облако из слов и цифр, которое;;;31;36;●       данные разделяются на части;сначала разделяется на 8 групп, от каждой считается хеш (стрелочки к коробочкам от которых опять стрелочки к блокам из нулей и единиц);;●       каждая из них хешируется;дальше попарно складываются (объединяются) хеши, остается 4 группы, опять берется хеш, потом остается две, потом одна. На словах “представляет собой digest всех данных” вот этот получившийся последний большой хеш должен как-то соотнестись с изначальным облаком (рядом возникает облако и стрелочка от него). дальше в облаке меняется какое-нибудь слово, и перечеркивается знак равно между этим облаком и хешом.;;●       полученные хеши объединяются в пары;++++;;●       берется хеш от суммы каждой пары;;;●       новые хеши тоже объединяются в пары, и так далее, пока не останется один хеш. Он называется корневым хешем дерева Меркла и представляет собой digest всех данных. То есть, как и для простого хеширования, изменение в любой их части непременно отразится в корневом хеше всего дерева (поскольку изменится хеш самой этой части, а значит – и все хеши вверх по дереву). ;31б;17;●       Но и проверить, входила ли та или иная часть информации в исходные данные, тоже очень легко: нужно взять хеш этой части и все хеши вверх по дереву вместе с их парами, повторить описанные действия и сравнить результат с корневым хешем дерева.;дерево меркла, выделяются данные в одной из нижних веток, подсвечивается ее хеш, его пара, результат пара хеша их объединения, и так далее, до последней пары, это все берется отдельно от дерева(которое, например, отъезжает в сторону), и вычисляется до верху. дерево возвращается в кадр, возникает знак равно со знаком вопроса между корнем исходного дерева и получившимся корнем проверки.;;;32;15;Итак, Хэйбер и Сторнетта уже в 90-х годах разработали систему, где документы с общим временем создания объединялись в блок, внутри блока приводились к виду дерева Меркла, а блоки связывались между собой. ;документы объединяются в блок, разбиваются на части превращаются в дерево меркла33;14;Эта структура данных, гарантирующая подлинность текста и метки о времени публикации документа, почти буквально совпадает со структурой данных Bitcoin, и Накамото ссылался на работы Хэйбера и Сторнетты в Bitcoin white paper.;говорящая голова34;17;Кстати, замысел Хэйбера и Сторнетты про “цифрового нотариуса” был-таки воплощен в жизнь: две компании – Surety в середине 90-ых и Guardtime, основанная в 2007 – оказывали услуги по подтверждению времени создания документов. ;Фон: логотипы компаний34б;11;Обе компании почерпнули из работ этих авторов и еще одну любопытную идею: публиковать корни деревьев Меркла в газетах, выкупая для этого небольшую рекламную площадь.;Фон: фотография газеты (см. после таблицы);;;35;18;Так вместе с документом можно было предоставить все хеши, требующиеся для проверки его соответствия опубликованному корню, и клиенты получали гарантию, что корневой хеш – ключевой элемент доказательства подлинности документа – возник не позже даты публикации газеты.;коротко повторяем анимацию объясняющую проверку принадлежности данных дереву, но вместо рандомного блока данных иконка документа36;17;Другое направление исследований, которое никак не было связано с первым, но вместе с ним легло в основу системы Bitcoin – это предотвращение ошибок при синхронизации данных между несколькими узлами сети, или, другими словами, при достижении консенсуса.;возникает схема направлений исследования с 6 стрелочками открывается второе направление “consensus”37;22;Задача состоит в том, чтобы несколько узлов сети, следуя определенному протоколу, договорились, какие данные считать верными. В процессе репликации может возникнуть множество разных ошибок, но самой общей категорией ошибки, а значит, и наиболее сложной для предотвращения является “византийская” ошибка, названная в честь задачи о византийских генералах.;изображение сети, узлы которой пытаются договориться о данных, посылая друг другу сообщения;;;38;14;Изначальная формулировка этой задачи принадлежит лауреату премии Тьюринга Лесли Лампорту, который вместе с двумя соавторами опубликовал одноименную статью “Задача о византийских генералах” в 1982 году.;Фон: фото Лампорта39;38;Задача, собственно, такая: некоторое количество византийских генералов со своими армиями в ночь перед сражением пытаются при помощи посыльных договориться об общем плане действий – атаковать им или отступать, при этом некоторые генералы и посыльные могут быть предателями. Генералы-предатели целенаправленно пытаются помешать верным генералам принять общий план действий, а посыльные-предатели могут искажать сообщения верных генералов. Вопрос в задаче – придумать такой протокол обмена сообщениями и принятия решений, чтобы все верные генералы приняли одно и то же обоснованное решение.;Тут напрашивается мультик, вы точно справитесь лучше нас, единственное - хотелось бы отразить “византийскость”. Наверное, в конце мультика должна получится анимированная схема, где генералы передают друг другу послания через посыльных, некоторые из них всех предатели40;22;Откуда взялась эта абстрактная формулировка, становится яснее, если заменить генералов на узлы распределенной сети, а посыльных – на соединение между ними. Некоторые узлы могут передавать неверную информацию, иногда преследуя цель помешать работе сети, а соединения, даже между исправными узлами, могут пропадать или искажать сигнал.;Тут и нужна схема в конце мультика, чтобы заменять ее элементы на соответствующие им. Мультик, наверное, продолжается41;10;Как вы могли заметить, задача сформулирована достаточно размыто, у нее может быть множество версий, и на их исследование ушло больше 15 лет. ;говорящая голова42;15;В оригинальной работе Лампорта и его коллег фокус был на том варианте задачи, где связь по большей части надежна, но узлы могут злонамеренно нарушать работу сети, то есть за ошибку считается любое отклонение от протокола. ;продолжение мультика43;9;В результате за словосочетанием “византийская ошибка” закрепилось максимально общее понимание любой ошибки при передаче информации в распределенной сети. ;говорящая голова44;13;В более поздней работе в 1989 году Лампорт предложил протокол Paxos, названный в честь острова в Ионическом море, вымышленный парламент которого послужил метафорой для протокола. ;Здесь можно показать остров Паксос и его вымышленный парламент.45;16;Paxos решал задачу при условии ненадежности связи, но ошибки самих узлов сводились к тому, что небольшое их количество может отключаться или отправлять устаревшие сообщения, а собственно “византийских” ошибок протокол не подразумевал вообще. ;мультик продолжается,  теперь с ненадежной связью45б;22;И только в 1999 году совместная работа Мигеля Кастро и Барбары Лисков предложила протокол PBFT – Practical Byzantine Fault Tolerance, который одновременно рассчитан и на ненадежность связи, и на злонамеренное искажение сигнала. С тех пор и Paxos, и PBFT, и другие, возникшие позже протоколы были многократно оптимизированы. ;Говорящая голова, ;;;46;4;Какое же отношение задача о византийских генералах имеет к системе Bitcoin?;большой знак вопроса, который увеличивается и лопается 47;2;Об этом - в нашем следующем ролике!;по-хорошему - здесь должна быть ссылка на следующий роликвсего:;704;;